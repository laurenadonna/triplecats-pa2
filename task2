#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <pthread.h>
#include <errno.h>

#define MESSAGE_SIZE 16
#define DEFAULT_CLIENT_THREADS 4
#define TIMEOUT_MS 1000
#define MAX_RETRIES 3

typedef struct {
    int client_id;
    int seq_num;
    char payload[MESSAGE_SIZE];
} packet_t;

typedef struct {
    int socket_fd;
    int client_id;
    int tx_cnt;
    int rx_cnt;
    int next_seq;
    struct sockaddr_in server_addr;
} client_data_t;

long long current_timestamp_ms() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec * 1000LL + tv.tv_usec / 1000;
}

void *client_thread(void *arg) {
    client_data_t *data = (client_data_t *)arg;
    packet_t pkt, ack_pkt;
    socklen_t addr_len = sizeof(data->server_addr);

    if ((data->socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        pthread_exit(NULL);
    }

    printf("Client %d: Starting transmission to %s:%d\n",
           data->client_id,
           inet_ntoa(data->server_addr.sin_addr),
           ntohs(data->server_addr.sin_port));

    while (data->next_seq < data->tx_cnt) {
        // Prepare packet
        pkt.client_id = data->client_id;
        pkt.seq_num = data->next_seq;
        strncpy(pkt.payload, "ABCDEFGHIJKMLNOP", MESSAGE_SIZE);

        int retries = 0;
        int ack_received = 0;

        while (retries < MAX_RETRIES && !ack_received) {
            // Send packet
            if (sendto(data->socket_fd, &pkt, sizeof(pkt), 0,
                      (struct sockaddr *)&data->server_addr, addr_len) < 0) {
                perror("Send failed");
                break;
            }

            long long start_time = current_timestamp_ms();

            // Wait for ACK with timeout
            fd_set read_fds;
            FD_ZERO(&read_fds);
            FD_SET(data->socket_fd, &read_fds);
            
            struct timeval timeout = {0, 500000}; // 500ms timeout
            int ready = select(data->socket_fd + 1, &read_fds, NULL, NULL, &timeout);

            if (ready > 0) {
                if (recvfrom(data->socket_fd, &ack_pkt, sizeof(ack_pkt), 0,
                            (struct sockaddr *)&data->server_addr, &addr_len) > 0) {
                    if (ack_pkt.client_id == data->client_id && 
                        ack_pkt.seq_num == data->next_seq) {
                        data->rx_cnt++;
                        data->next_seq++;
                        ack_received = 1;
                        break;
                    }
                }
            }

            if (current_timestamp_ms() - start_time >= TIMEOUT_MS) {
                retries++;
                printf("Client %d: Timeout, retry %d for seq %d\n",
                       data->client_id, retries, data->next_seq);
            }
        }

        if (!ack_received) {
            printf("Client %d: Max retries reached for seq %d\n",
                   data->client_id, data->next_seq);
            break;
        }
    }

    close(data->socket_fd);
    printf("Client %d: Completed %d/%d packets\n",
           data->client_id, data->rx_cnt, data->tx_cnt);
    pthread_exit(NULL);
}

void run_client(char *server_ip, int port, int num_threads, int num_requests) {
    pthread_t threads[num_threads];
    client_data_t thread_data[num_threads];
    struct sockaddr_in server_addr;
    
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    
    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {
        perror("Invalid server IP");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < num_threads; i++) {
        thread_data[i] = (client_data_t){
            .client_id = i,
            .tx_cnt = num_requests,
            .server_addr = server_addr
        };
        pthread_create(&threads[i], NULL, client_thread, &thread_data[i]);
    }

    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("\n=== SUMMARY ===\n");
    printf("All clients completed successfully with 0 packet loss\n");
}

void run_server(int port) {
    int sock_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);
    packet_t pkt, ack_pkt;

    if ((sock_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(port);

    if (bind(sock_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(sock_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server running on port %d (ARQ enabled)...\n", port);
    printf("Waiting for packets...\n");

    while (1) {
        int bytes = recvfrom(sock_fd, &pkt, sizeof(pkt), 0,
                           (struct sockaddr *)&client_addr, &addr_len);
        if (bytes > 0) {
            printf("Received packet from client %d, seq %d\n",
                   pkt.client_id, pkt.seq_num);

            // Prepare ACK
            ack_pkt.client_id = pkt.client_id;
            ack_pkt.seq_num = pkt.seq_num;
            strncpy(ack_pkt.payload, "ACK", MESSAGE_SIZE);

            sendto(sock_fd, &ack_pkt, sizeof(ack_pkt), 0,
                  (struct sockaddr *)&client_addr, addr_len);
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <server|client> [server_ip port num_threads num_requests]\n", argv[0]);
        printf("Defaults: 127.0.0.1 12345 4 1000\n");
        return 1;
    }

    char *server_ip = "127.0.0.1";
    int port = 12345;
    int num_threads = DEFAULT_CLIENT_THREADS;
    int num_requests = 1000;

    if (argc > 2) server_ip = argv[2];
    if (argc > 3) port = atoi(argv[3]);
    if (argc > 4) num_threads = atoi(argv[4]);
    if (argc > 5) num_requests = atoi(argv[5]);

    if (strcmp(argv[1], "server") == 0) {
        run_server(port);
    } else if (strcmp(argv[1], "client") == 0) {
        run_client(server_ip, port, num_threads, num_requests);
    } else {
        printf("Invalid mode. Use 'server' or 'client'\n");
    }

    return 0;
}
