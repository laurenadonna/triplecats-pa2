#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <pthread.h>
#include <errno.h>

#define MESSAGE_SIZE 16
#define DEFAULT_CLIENT_THREADS 4
#define TIMEOUT_SEC 1

typedef struct {
    int socket_fd;
    int client_id;
    int tx_cnt;
    int rx_cnt;
    struct sockaddr_in server_addr;
} client_data_t;

void *client_thread(void *arg) {
    client_data_t *data = (client_data_t *)arg;
    char send_buf[MESSAGE_SIZE] = "ABCDEFGHIJKMLNOP";
    char recv_buf[MESSAGE_SIZE];
    socklen_t addr_len = sizeof(data->server_addr);

    // Create UDP socket
    if ((data->socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        pthread_exit(NULL);
    }

    printf("Client %d: Socket created, sending to %s:%d\n", 
           data->client_id, 
           inet_ntoa(data->server_addr.sin_addr),
           ntohs(data->server_addr.sin_port));

    for (int i = 0; i < data->tx_cnt; i++) {
        // Send message
        if (sendto(data->socket_fd, send_buf, MESSAGE_SIZE, 0,
                  (struct sockaddr *)&data->server_addr, addr_len) < 0) {
            perror("Send failed");
            continue;
        }

        // Wait for response with timeout
        fd_set read_fds;
        FD_ZERO(&read_fds);
        FD_SET(data->socket_fd, &read_fds);
        
        struct timeval timeout = {TIMEOUT_SEC, 0};
        int ready = select(data->socket_fd + 1, &read_fds, NULL, NULL, &timeout);
        
        if (ready > 0) {
            if (recvfrom(data->socket_fd, recv_buf, MESSAGE_SIZE, 0,
                        (struct sockaddr *)&data->server_addr, &addr_len) > 0) {
                data->rx_cnt++;
            }
        }
    }

    close(data->socket_fd);
    pthread_exit(NULL);
}

void run_client(char *server_ip, int port, int num_threads, int num_requests) {
    pthread_t threads[num_threads];
    client_data_t thread_data[num_threads];
    struct sockaddr_in server_addr;
    
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    
    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {
        perror("Invalid server IP");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < num_threads; i++) {
        thread_data[i] = (client_data_t){
            .client_id = i,
            .tx_cnt = num_requests,
            .server_addr = server_addr
        };
        pthread_create(&threads[i], NULL, client_thread, &thread_data[i]);
    }

    int total_tx = 0, total_rx = 0;
    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
        total_tx += thread_data[i].tx_cnt;
        total_rx += thread_data[i].rx_cnt;
        printf("Client %d: Sent %d, Received %d, Lost %d\n",
               i, thread_data[i].tx_cnt, thread_data[i].rx_cnt,
               thread_data[i].tx_cnt - thread_data[i].rx_cnt);
    }

    printf("\n=== SUMMARY ===\n");
    printf("Total packets sent: %d\n", total_tx);
    printf("Total packets received: %d\n", total_rx);
    printf("Total packets lost: %d (%.2f%%)\n", 
           total_tx - total_rx,
           (total_tx - total_rx) * 100.0 / total_tx);
}

void run_server(int port) {
    int sock_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);
    char buf[MESSAGE_SIZE];

    if ((sock_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(port);

    if (bind(sock_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(sock_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server running on port %d...\n", port);
    printf("Waiting for UDP messages...\n");

    while (1) {
        int bytes = recvfrom(sock_fd, buf, MESSAGE_SIZE, 0,
                           (struct sockaddr *)&client_addr, &addr_len);
        if (bytes > 0) {
            printf("Received %d bytes from %s:%d\n", 
                   bytes,
                   inet_ntoa(client_addr.sin_addr),
                   ntohs(client_addr.sin_port));
            
            // Echo back
            sendto(sock_fd, buf, bytes, 0,
                  (struct sockaddr *)&client_addr, addr_len);
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <server|client> [server_ip port num_threads num_requests]\n", argv[0]);
        printf("Defaults: 127.0.0.1 12345 4 1000\n");
        return 1;
    }

    char *server_ip = "127.0.0.1";
    int port = 12345;
    int num_threads = DEFAULT_CLIENT_THREADS;
    int num_requests = 1000;

    if (argc > 2) server_ip = argv[2];
    if (argc > 3) port = atoi(argv[3]);
    if (argc > 4) num_threads = atoi(argv[4]);
    if (argc > 5) num_requests = atoi(argv[5]);

    if (strcmp(argv[1], "server") == 0) {
        run_server(port);
    } else if (strcmp(argv[1], "client") == 0) {
        run_client(server_ip, port, num_threads, num_requests);
    } else {
        printf("Invalid mode. Use 'server' or 'client'\n");
    }

    return 0;
}
